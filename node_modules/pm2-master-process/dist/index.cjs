'use strict';

var pm2 = require('pm2');
var util = require('util');
var promiseBasedTask = require('promise-based-task');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var pm2__default = /*#__PURE__*/_interopDefault(pm2);

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// src/config.ts
var Config = {
  instanceStatus: [
    "online"
  ],
  logger: {
    log: console.log,
    error: console.error,
    warn: console.warn
  }
};

// src/utils.ts
function fixConfig(config) {
  if (config === Config) {
    return config;
  }
  const logger = config?.logger === false ? {
    log: () => {
    },
    warn: () => {
    },
    error: () => {
    }
  } : {
    ...Config.logger,
    ...config?.logger || {}
  };
  return {
    ...Config,
    ...config,
    logger
  };
}
__name(fixConfig, "fixConfig");
var initConnection = function() {
  let task = null;
  return () => {
    if (task) {
      return task;
    }
    task = new promiseBasedTask.Task();
    pm2__default.default.connect(true, (err) => {
      if (err) {
        task?.reject(err);
        task = new promiseBasedTask.Task();
      } else {
        task?.resolve();
      }
    });
    return task;
  };
}();
function getProcessId(process1) {
  const processId = Number(process1.pm_id ?? process1.pm2_env?.pm_id);
  return Number.isNaN(processId) ? null : processId;
}
__name(getProcessId, "getProcessId");
function getCurrentProcessId() {
  const processId = Number(process.env.pm_id);
  return Number.isNaN(processId) ? null : processId;
}
__name(getCurrentProcessId, "getCurrentProcessId");
async function getProcesses({ instanceStatus = [] } = Config) {
  await initConnection();
  const processes = await util.promisify(pm2__default.default.list).bind(pm2__default.default)();
  if (processes.length === 0) {
    return [];
  }
  const curProcessId = getCurrentProcessId();
  const curProcess = processes.find((process1) => getProcessId(process1) === curProcessId);
  if (!curProcess?.name) {
    throw new Error(`Invalid instance name in pm2!`);
  }
  return processes.filter((process1) => process1.name === curProcess.name).filter((process1) => instanceStatus.length === 0 || instanceStatus.includes(process1.pm2_env?.status));
}
__name(getProcesses, "getProcesses");
async function getProcessesIds(customConfig = Config) {
  const config = fixConfig(customConfig);
  const curProcessId = getCurrentProcessId();
  if (curProcessId === null) {
    config.logger.warn("Not running in PM2.");
    return [];
  }
  const processes = await getProcesses(config);
  if (processes.length === 0) {
    return [
      curProcessId
    ];
  }
  return processes.map(getProcessId).filter((id) => id !== null);
}
__name(getProcessesIds, "getProcessesIds");
async function getMasterProcessId(customConfig = Config) {
  const config = fixConfig(customConfig);
  const processesIds = await getProcessesIds(config);
  if (processesIds.length === 0) {
    return null;
  }
  return Math.min(...processesIds);
}
__name(getMasterProcessId, "getMasterProcessId");
async function isMasterProcess(customConfig = Config) {
  const curId = getCurrentProcessId();
  if (curId === null) {
    return true;
  }
  const masterId = await getMasterProcessId(customConfig);
  return curId === masterId;
}
__name(isMasterProcess, "isMasterProcess");
async function getSlavesCount(customConfig = Config) {
  const config = fixConfig(customConfig);
  const processes = await getProcessesIds(config);
  return Math.max(0, processes.length - 1);
}
__name(getSlavesCount, "getSlavesCount");

// src/decorators.ts
var MasterInstance = /* @__PURE__ */ __name((config = Config) => (
  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
  (target, propertyKey, descriptor) => {
    const method = descriptor.value;
    descriptor.value = async function(...args) {
      if (!await isMasterProcess(config)) {
        return;
      }
      method.apply(this, args);
    };
  }
), "MasterInstance");
var NotMasterInstance = /* @__PURE__ */ __name((config = Config) => (
  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
  (target, propertyKey, descriptor) => {
    const method = descriptor.value;
    descriptor.value = async function(...args) {
      if (await isMasterProcess(config)) {
        return;
      }
      method.apply(this, args);
    };
  }
), "NotMasterInstance");

exports.MasterInstance = MasterInstance;
exports.NotMasterInstance = NotMasterInstance;
exports.getCurrentProcessId = getCurrentProcessId;
exports.getMasterProcessId = getMasterProcessId;
exports.getProcesses = getProcesses;
exports.getProcessesIds = getProcessesIds;
exports.getSlavesCount = getSlavesCount;
exports.isMasterProcess = isMasterProcess;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.cjs.map