{"version":3,"sources":["../src/core.ts","../src/config.ts","../src/utils.ts","../src/decorators.ts"],"names":["pm2","promisify","Config","instanceStatus","logger","log","console","error","warn","fixConfig","config","BaseConfig","Task","initConnection","task","connect","err","reject","resolve","getProcessId","process","processId","Number","pm_id","pm2_env","isNaN","getCurrentProcessId","env","getProcesses","processes","list","bind","length","curProcessId","curProcess","find","name","Error","filter","includes","status","getProcessesIds","customConfig","map","id","getMasterProcessId","processesIds","Math","min","isMasterProcess","curId","masterId","getSlavesCount","max","MasterInstance","target","propertyKey","descriptor","method","value","args","apply","NotMasterInstance"],"mappings":"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","sourcesContent":["import pm2, { ProcessDescription } from 'pm2';\nimport { promisify } from 'util';\nimport { Config } from './config';\nimport { Pm2MasterProcessConfig } from './types';\nimport { fixConfig } from './utils';\nimport { Task } from 'promise-based-task'\n\nconst initConnection = (function() {\n  let task: null | Task<void> = null\n\n  return (): Promise<void> => {\n    if (task) {\n      return task\n    }\n\n    task = new Task<void>()\n\n    pm2.connect(true, (err: unknown) => {\n      if (err) {\n        task?.reject(err);\n        task = new Task<void>()\n      } else {\n        task?.resolve();\n      }\n    });\n\n    return task\n  }\n})()\n\nfunction getProcessId(process: ProcessDescription): number | null {\n  const processId = Number(process.pm_id ?? (process.pm2_env as any)?.pm_id);\n  return Number.isNaN(processId) ? null : processId;\n}\n\nexport function getCurrentProcessId(): number | null {\n  const processId = Number(process.env.pm_id);\n  return Number.isNaN(processId) ? null : processId;\n}\n\nexport async function getProcesses({ instanceStatus = [] }: Pick<Pm2MasterProcessConfig, 'instanceStatus'> = Config): Promise<ProcessDescription[]> {\n  // Connection to PM2 daemon is global\n  await initConnection()\n\n  const processes: ProcessDescription[] = await promisify(pm2.list).bind(pm2)();\n\n  // Running in a fork mode\n  if (processes.length === 0) {\n    return [];\n  }\n\n  const curProcessId = getCurrentProcessId();\n  const curProcess: ProcessDescription | undefined = processes.find(\n    (process) => getProcessId(process) === curProcessId,\n  );\n\n  if (!curProcess?.name) {\n    throw new Error(`Invalid instance name in pm2!`);\n  }\n\n  return processes\n    .filter((process) => process.name === curProcess.name)\n    .filter((process) => instanceStatus.length === 0 || instanceStatus.includes(process.pm2_env?.status!))\n}\n\nexport async function getProcessesIds(customConfig: Partial<Pm2MasterProcessConfig> = Config): Promise<number[]> {\n  const config: Pm2MasterProcessConfig = fixConfig(customConfig);\n\n  const curProcessId = getCurrentProcessId();\n  if (curProcessId === null) {\n    config.logger.warn('Not running in PM2.');\n    return [];\n  }\n\n  const processes = await getProcesses(config)\n\n  if (processes.length === 0) {\n    return [curProcessId]\n  }\n\n  return processes\n    .map(getProcessId)\n    .filter((id): id is number => id !== null);\n}\n\nexport async function getMasterProcessId(customConfig: Partial<Pm2MasterProcessConfig> = Config): Promise<number | null> {\n  const config: Pm2MasterProcessConfig = fixConfig(customConfig);\n  const processesIds: number[] = await getProcessesIds(config);\n\n  // Not PM2\n  if (processesIds.length === 0) {\n    return null;\n  }\n\n  // Cluster mode\n  return Math.min(...processesIds)\n}\n\nexport async function isMasterProcess(customConfig: Partial<Pm2MasterProcessConfig> = Config): Promise<boolean> {\n  const curId: number | null = getCurrentProcessId();\n\n  if (curId === null) {\n    return true;\n  }\n\n  const masterId = await getMasterProcessId(customConfig)\n  return curId === masterId;\n}\n\nexport async function getSlavesCount(customConfig: Partial<Pm2MasterProcessConfig> = Config): Promise<number> {\n  const config: Pm2MasterProcessConfig = fixConfig(customConfig);\n\n  const processes = await getProcessesIds(config);\n  return Math.max(0, processes.length - 1)\n}\n","import type { ConfigType } from './types'\n\nexport const Config: ConfigType = {\n  instanceStatus: ['online'],\n  logger: {\n    log: console.log,\n    error: console.error,\n    warn: console.warn,\n  },\n};\n","import { Pm2MasterProcessConfig } from './types';\nimport { Config as BaseConfig } from './config';\n\nexport function fixConfig(config: Partial<Pm2MasterProcessConfig>): Pm2MasterProcessConfig {\n  if (config === BaseConfig) {\n    return config as Pm2MasterProcessConfig;\n  }\n\n  const logger: Pm2MasterProcessConfig['logger'] = config?.logger === false ? {\n    log: () => {},\n    warn: () => {},\n    error: () => {},\n  } : {\n    ...BaseConfig.logger,\n    ...(config?.logger || {}),\n  }\n\n  return {\n    ...BaseConfig,\n    ...config,\n    logger,\n  }\n}\n","import { isMasterProcess } from './core';\nimport { Pm2MasterProcessConfig } from './types';\nimport { Config } from './config';\n\nexport const MasterInstance =\n  (config: Partial<Pm2MasterProcessConfig> = Config) =>\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    (target: Object, propertyKey: string, descriptor: PropertyDescriptor) => {\n      const method = descriptor.value;\n\n      descriptor.value = async function (...args: unknown[]) {\n        if (!(await isMasterProcess(config))) {\n          return;\n        }\n\n        method.apply(this, args);\n      };\n    };\n\nexport const NotMasterInstance =\n  (config: Partial<Pm2MasterProcessConfig> = Config) =>\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    (target: Object, propertyKey: string, descriptor: PropertyDescriptor) => {\n      const method = descriptor.value;\n\n      descriptor.value = async function (...args: unknown[]) {\n        if ((await isMasterProcess(config))) {\n          return;\n        }\n\n        method.apply(this, args);\n      };\n    };\n"]}