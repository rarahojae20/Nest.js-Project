import { ProcessDescription } from 'pm2';

type ProcessStatus = Exclude<Required<ProcessDescription>['pm2_env']['status'], undefined>;
type ConfigType = {
    instanceStatus: ProcessStatus[];
    logger: {
        log: (msg: any) => void;
        error: (msg: any) => void;
        warn: (msg: any) => void;
    };
};
type AnyFn = (...data: unknown[]) => unknown;
type Pm2MasterProcessConfig = ConfigType & {
    logger: false | Record<keyof ConfigType['logger'], AnyFn>;
};

declare function getCurrentProcessId(): number | null;
declare function getProcesses({ instanceStatus }?: Pick<Pm2MasterProcessConfig, 'instanceStatus'>): Promise<ProcessDescription[]>;
declare function getProcessesIds(customConfig?: Partial<Pm2MasterProcessConfig>): Promise<number[]>;
declare function getMasterProcessId(customConfig?: Partial<Pm2MasterProcessConfig>): Promise<number | null>;
declare function isMasterProcess(customConfig?: Partial<Pm2MasterProcessConfig>): Promise<boolean>;
declare function getSlavesCount(customConfig?: Partial<Pm2MasterProcessConfig>): Promise<number>;

declare const MasterInstance: (config?: Partial<Pm2MasterProcessConfig>) => (target: Object, propertyKey: string, descriptor: PropertyDescriptor) => void;
declare const NotMasterInstance: (config?: Partial<Pm2MasterProcessConfig>) => (target: Object, propertyKey: string, descriptor: PropertyDescriptor) => void;

export { AnyFn, ConfigType, MasterInstance, NotMasterInstance, Pm2MasterProcessConfig, ProcessStatus, getCurrentProcessId, getMasterProcessId, getProcesses, getProcessesIds, getSlavesCount, isMasterProcess };
