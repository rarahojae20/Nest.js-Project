"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Builder: () => Builder,
  StrictBuilder: () => StrictBuilder
});
module.exports = __toCommonJS(src_exports);

// src/Builder.ts
function Builder(typeOrTemplate, templateOrOverride, override) {
  let type;
  let template;
  let overrideValues;
  if (typeOrTemplate instanceof Function) {
    type = typeOrTemplate;
    template = templateOrOverride;
    overrideValues = override;
  } else {
    template = typeOrTemplate;
    overrideValues = templateOrOverride;
  }
  const built = template ? Object.assign({}, template) : {};
  const builder = new Proxy(
    {},
    {
      get(target, prop) {
        if ("build" === prop) {
          if (overrideValues) {
            Object.assign(built, overrideValues);
          }
          if (type) {
            const obj = new type();
            return () => Object.assign(obj, { ...built });
          } else {
            return () => built;
          }
        }
        return (...args) => {
          if (0 === args.length) {
            return built[prop.toString()];
          }
          built[prop.toString()] = args[0];
          return builder;
        };
      }
    }
  );
  return builder;
}

// src/StrictBuilder.ts
function StrictBuilder() {
  const built = {};
  const strictbuilder = new Proxy(
    {},
    {
      get(target, prop) {
        if ("build" === prop) {
          return () => built;
        }
        return (...args) => {
          if (0 === args.length) {
            return built[prop.toString()];
          }
          built[prop.toString()] = args[0];
          return strictbuilder;
        };
      }
    }
  );
  return strictbuilder;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Builder,
  StrictBuilder
});
//# sourceMappingURL=index.js.map